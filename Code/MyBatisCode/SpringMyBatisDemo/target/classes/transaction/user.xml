<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                                       http://www.springframework.org/schema/beans/spring-beans.xsd
                                       http://www.springframework.org/schema/tx
                                       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 自定义创建数据源datasource -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
        <property name="username" value="root"/>
        <property name="password" value="120618"/>
    </bean>

    <!-- 配置SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 引用数据源组件 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 设置实体类别名，方便映射文件；仅需指定实体类所在的包，避免繁琐的重复配置 -->
        <property name="typeAliasesPackage" value="transaction.entity"/>
        <!-- 引用SQL映射文件中的配置：进行通配设置
        <property name="mapperLocations" value="UserMapper.xml"/>-->
        <property name="mapperLocations">
            <list>
                <value>classpath:transaction/UserMapper.xml</value>
            </list>
        </property>

    </bean>

    <!-- 4.根据sqlSessionFactory创建DAO对象 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--扫描Dao接口所在包-->
        <property name="basePackage" value="transaction.dao"/>
    </bean>

    <!-- 5.创建UserService原始对象对象并注入UserDao -->
    <bean id="userService" class="transaction.service.UserServiceImpl">
        <!--注入UserDao
            由于是自定义类型，因此使用ref进行引用；
            MapperScannerConfigurer创建了接口名首字母小写的对象-->
        <property name="userDao" ref="userDao"/>
    </bean>

    <!-- 6.DataSourceTransactionManager开发事务额外功能-->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--注入连接池：获取连接，控制事务-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 7.组装切面，并自动扫描切入点
        进行动态代理底层实现的切换，默认`false`是JDK，`true`是Cglib-->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager" proxy-target-class="true"/>
</beans>